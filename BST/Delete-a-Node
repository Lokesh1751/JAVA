
import java.util.*;

public  class deletenode {
    public static class Node {
        int data;
        Node left;
        Node right;

        Node(int val) {
            this.data = val;
            this.left = null;
            this.right = null;
        }
    }

    public static Node insert(Node root, int val) {
        if (root == null) {
            Node newnode = new Node(val);
            root = newnode;
            return root;
        }
        if (root.data > val) {
            root.left = insert(root.left, val);
        } else {
            root.right = insert(root.right, val);
        }
        return root;
    }

    public static void Inorder(Node root) {
        if (root == null) {
            return;
        }
        Inorder(root.left);
        System.out.print(root.data + " ");
        Inorder(root.right);
    }

    public static Node delete(Node root,int val){
        if(root.data>val){
            root.left=delete(root.left, val);
        }
        else if(root.data<val){
            root.right=delete(root.right, val);
        }
        else{
            //case 1 => no child of value node
            if(root.right==null && root.left==null){
                return null;
            }

            // case 2 => 1 child of value node
            if(root.left==null){
                return root.right;
            }
            if(root.right==null){
                return root.left;
            }
else{
            // case 3 => 2 childs of value node
            // in this case we have to find the inorder succesor of the value node for this we have to go to left most node in right subtree of the value node
            Node IS=inordersuccesor(root.right);
            root.data=IS.data;
            delete(root.right, IS.data);
}
        }
        return root;
    }
    public static Node inordersuccesor(Node root){
        if(root.left==null){
            return root;
        }
        return inordersuccesor(root.left);
    }
    public static void main(String[] args) {
        int values[] = {8,5,3,1,4,6,10,11,14};
        Node root = null;
        for (int i = 0; i < values.length; i++) {
            root = insert(root, values[i]);
        }
        Inorder(root); System.out.println();
       delete(root, 10);
        Inorder(root);
        
    }
}
